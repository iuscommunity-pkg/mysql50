Back-ported patch for upstream bug #54044.


diff -Naur mysql-5.0.77.orig/mysql-test/suite/innodb/r/innodb_bug54044.result mysql-5.0.77/mysql-test/suite/innodb/r/innodb_bug54044.result
--- mysql-5.0.77.orig/mysql-test/suite/innodb/r/innodb_bug54044.result	1969-12-31 19:00:00.000000000 -0500
+++ mysql-5.0.77/mysql-test/suite/innodb/r/innodb_bug54044.result	2010-10-22 16:14:35.258984986 -0400
@@ -0,0 +1,3 @@
+CREATE TEMPORARY TABLE TABLE_54044 ENGINE = INNODB
+AS SELECT IF(NULL  IS NOT NULL, NULL, NULL);
+ERROR HY000: Can't create table 'test.TABLE_54044' (errno: -1)
diff -Naur mysql-5.0.77.orig/mysql-test/suite/innodb/t/innodb_bug54044.test mysql-5.0.77/mysql-test/suite/innodb/t/innodb_bug54044.test
--- mysql-5.0.77.orig/mysql-test/suite/innodb/t/innodb_bug54044.test	1969-12-31 19:00:00.000000000 -0500
+++ mysql-5.0.77/mysql-test/suite/innodb/t/innodb_bug54044.test	2010-10-22 16:14:35.258984986 -0400
@@ -0,0 +1,11 @@
+# This is the test for bug #54044. Special handle MYSQL_TYPE_NULL type
+# during create table, so it will not trigger assertion failure.
+
+--source include/have_innodb.inc
+
+# This 'create table' operation should fail because of
+# using NULL datatype
+--error ER_CANT_CREATE_TABLE
+CREATE TEMPORARY TABLE TABLE_54044 ENGINE = INNODB
+ AS SELECT IF(NULL  IS NOT NULL, NULL, NULL); 
+
diff -Naur mysql-5.0.77.orig/sql/ha_innodb.cc mysql-5.0.77/sql/ha_innodb.cc
--- mysql-5.0.77.orig/sql/ha_innodb.cc	2009-01-29 16:45:25.000000000 -0500
+++ mysql-5.0.77/sql/ha_innodb.cc	2010-10-22 16:21:13.451929407 -0400
@@ -2590,6 +2590,11 @@
 		case FIELD_TYPE_BLOB:
 		case FIELD_TYPE_LONG_BLOB:
 					return(DATA_BLOB);
+		case FIELD_TYPE_NULL:
+		  /* MySQL currently accepts "NULL" datatype, but will
+		     reject such datatype in the next release. We will cope
+		     with it and not trigger assertion failure in 5.1 */
+		  break;
 		default:
 					assert(0);
 	}
@@ -4393,7 +4398,27 @@
 		field = form->field[i];
 
 		col_type = get_innobase_type_from_mysql_type(&unsigned_type,
-									field);
+							     field);
+
+		if (!col_type) {
+			push_warning_printf(
+				(THD*) trx->mysql_thd,
+				MYSQL_ERROR::WARN_LEVEL_WARN,
+				ER_CANT_CREATE_TABLE,
+				"Error creating table '%s' with "
+				"column '%s'. Please check its "
+				"column type and try to re-create "
+				"the table with an appropriate "
+				"column type.",
+				table->name, (char*) field->field_name);
+
+			dict_mem_table_free(table);
+			trx_commit_for_mysql(trx);
+
+			error = DB_ERROR;
+			goto error_ret;
+		}
+
 		if (field->null_ptr) {
 			nulls_allowed = 0;
 		} else {
@@ -4450,6 +4475,7 @@
 
 	error = row_create_table_for_mysql(table, trx);
 
+error_ret:
 	error = convert_error_code_to_mysql(error, NULL);
 
 	DBUG_RETURN(error);
