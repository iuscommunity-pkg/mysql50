Back-ported patch for upstream bug #53544.


diff -Naur mysql-5.0.77.orig/mysql-test/r/join.result mysql-5.0.77/mysql-test/r/join.result
--- mysql-5.0.77.orig/mysql-test/r/join.result	2009-01-29 17:38:16.000000000 -0500
+++ mysql-5.0.77/mysql-test/r/join.result	2010-10-22 14:59:59.832990188 -0400
@@ -860,3 +860,24 @@
 Handler_read_rnd_next	5
 drop table t1, t2, t3;
 End of 5.0 tests.
+#
+# Bug #53544: Server hangs during JOIN query in stored procedure called
+#             twice in a row
+#
+CREATE TABLE t1(c INT);
+INSERT INTO t1 VALUES (1), (2);
+PREPARE stmt FROM "SELECT t2.c AS f1 FROM t1 LEFT JOIN
+                                        t1 t2 ON t1.c=t2.c RIGHT JOIN
+                                        t1 t3 ON t1.c=t3.c 
+                   GROUP BY f1;";
+EXECUTE stmt;
+f1
+1
+2
+EXECUTE stmt;
+f1
+1
+2
+DEALLOCATE PREPARE stmt;
+DROP TABLE t1;
+End of 5.1 tests
diff -Naur mysql-5.0.77.orig/mysql-test/t/join.test mysql-5.0.77/mysql-test/t/join.test
--- mysql-5.0.77.orig/mysql-test/t/join.test	2009-01-29 17:37:53.000000000 -0500
+++ mysql-5.0.77/mysql-test/t/join.test	2010-10-22 15:00:48.423916095 -0400
@@ -662,3 +662,25 @@
 
 
 --echo End of 5.0 tests.
+
+--echo #
+--echo # Bug #53544: Server hangs during JOIN query in stored procedure called
+--echo #             twice in a row
+--echo #
+
+CREATE TABLE t1(c INT);
+
+INSERT INTO t1 VALUES (1), (2);
+
+PREPARE stmt FROM "SELECT t2.c AS f1 FROM t1 LEFT JOIN
+                                        t1 t2 ON t1.c=t2.c RIGHT JOIN
+                                        t1 t3 ON t1.c=t3.c 
+                   GROUP BY f1;";
+
+EXECUTE stmt;
+EXECUTE stmt;
+
+DEALLOCATE PREPARE stmt;
+DROP TABLE t1;
+
+--echo End of 5.1 tests
diff -Naur mysql-5.0.77.orig/sql/sql_select.cc mysql-5.0.77/sql/sql_select.cc
--- mysql-5.0.77.orig/sql/sql_select.cc	2009-01-29 16:45:34.000000000 -0500
+++ mysql-5.0.77/sql/sql_select.cc	2010-10-22 14:58:45.835989513 -0400
@@ -8295,10 +8295,10 @@
     
   /* Flatten nested joins that can be flattened. */
   TABLE_LIST *right_neighbor= NULL;
-  bool fix_name_res= FALSE;
   li.rewind();
   while ((table= li++))
   {
+    bool fix_name_res= FALSE;
     nested_join= table->nested_join;
     if (nested_join && !table->on_expr)
     {
